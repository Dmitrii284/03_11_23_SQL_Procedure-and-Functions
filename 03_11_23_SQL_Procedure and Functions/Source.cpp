/*
В SQL PL (SQL Procedural Language) есть два основных элемента: процедуры и функции.

Основное отличие процедуры от функции заключается в том, что процедура выполняет набор команд,
а функция возвращает значение.

Процедуры часто используются для выполнения сложных операций или обработки данных. Например,
процедура может использоваться для вставки,
обновления или удаления данных из таблицы.

Функции, с другой стороны, используются для получения конкретного значения из данных. Например,
функция может быть использована для подсчета количества записей в таблице, вычисления среднего значения или 
получения данных по определенному условию.

В целом, процедуры и функции в SQL PL позволяют выполнять различные операции с данными,
делая SQL более мощным и гибким языком.

Примеры процедур и функций в SQL PL:

Процедура для вставки данных в таблицу:

CREATE PROCEDURE insert_data(IN p_name VARCHAR(50), IN p_age INT)
BEGIN
    INSERT INTO users (name, age) VALUES (p_name, p_age);
END;
Эта процедура принимает два параметра (имя и возраст) и вставляет новую запись в таблицу users.

Функция для подсчета количества записей в таблице:

CREATE FUNCTION count_users() RETURNS INT
BEGIN
    RETURN (SELECT COUNT(*) FROM users);
END;
Эта функция возвращает количество записей в таблице users.

Пояснения:

– В обоих случаях мы используем ключевые слова CREATE PROCEDURE и CREATE FUNCTION для 
создания новых объектов (процедуры или функции).
– После ключевого слова RETURNS указывается тип возвращаемого значения. 
В случае функции count_users() это INT,
то есть функция возвращает целое число.
– Внутри функции или процедуры используются SQL-запросы для работы с данными. В функции count_users(),
например, 
используется запрос SELECT COUNT(*) FROM users для подсчета записей в таблице.

\\\\\\\\\\\\\\\\\\\\\\\
PROCEDURE
\\\\\\\\\\\\\\\\\

Для создания процедуры добавления доктора в зависимости от зарплаты >15000 на основе указанной таблицы, вы можете использовать следующий SQL-код:

USE hospital1
GO
CREATE PROCEDURE AddDoctor
    @name nvarchar(50),
    @surname nvarchar(50),
    @salary money,
    @premium money
AS
BEGIN
    INSERT INTO doctors (name, surname, salary, premium)
    VALUES (@name, @surname, @salary, @premium)
    WHERE salary > 15000
END
GO


Процедура AddDoctor принимает параметры @name (имя), @surname (фамилия),
@salary (зарплата) и @premium (премия). Она вставляет новую запись в таблицу doctors,
только если значение зарплаты превышает 15000.

Вы можете вызвать процедуру с помощью следующего кода:

EXEC AddDoctor 'Иван', 'Иванов', 20000, 5000


Этот код добавит нового доктора с именем "Иван", фамилией "Иванов", зарплатой 20000 и премией 5000,
так как его зарплата превышает 15000.
\\\\\\\\\\\\\\\\\\\\\\\
FUNCTION
\\\\\\\\\\\\\\\\\
Для создания функции расчета фонда заработной платы у всех докторов с вычетом налога 35%,
можно использовать следующий SQL-запрос:

USE [hospital1]
GO

CREATE FUNCTION dbo.CalculateNetSalary (@salary money, @premium money)
RETURNS money
AS
BEGIN
    DECLARE @netSalary money;
    SET @netSalary = (@salary + @premium) * (1 - 0.35);

    RETURN @netSalary;
END
GO


После выполнения данного запроса, будет создана функция dbo.CalculateNetSalary,
которая принимает зарплату (salary) и премию (premium) 
доктора и возвращает фонд заработной платы с вычетом налога 35%.

...........................
В SQL DECLARE что делает?
..................
В SQL PL, язык программирования для работы с базами данных, 
DECLARE используется для объявления переменных. Например:

DECLARE
  var_name data_type [NOT NULL];
  var2 data_type2 [NOT NULL];
BEGIN
  -- statements
END;
Здесь мы объявляем две переменные - var_name и var2.
Для каждой переменной указывается ее имя, тип данных и опционально флаг NOT NULL, который указывает,
что переменная не должна содержать null-значений.
После объявления переменных можно использовать их в SQL-запросах или выполнять с ними другие операции.

\\\\\\\
Использование созданных функций в написании кода 
\\\\\\\\\\\\\\
Чтобы использовать данную функцию в SQL, вы можете вызывать ее в запросе SELECT следующим образом:

SELECT *
FROM dbo.ret_table('John,Anna,Michael')


В этом примере мы передаем строку "John,Anna,Michael" в качестве 
параметра @names функции ret_table(). Функция STRING_SPLIT() разбивает эту строку на отдельные значения, 
т.е. "John", "Anna" и "Michael". Затем функция ret_table() возвращает таблицу со столбцом names, 
содержащим эти значения:

names
------
John
Anna
Michael


Вы можете изменить параметр @names и передать любую строку с данными, разделенными запятыми.
Результатом будет таблица с разделенными значениями в столбце names.

USE [hospital1]
GO

CREATE FUNCTION ret_table
(
  @names nvarchar(max)
)
RETURNS table
AS
RETURN
(
SELECT value AS names
FROM STRING_SPLIT(@Names, ',')
);


DECLARE @value NVARCHAR(max) ='DFG, ASG, TTTTTT, 3654654'
SELECT names
FROM dbo.ret_table(@value)

*/